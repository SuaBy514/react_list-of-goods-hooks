{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setReverse","visibleGoods","goods","sort","firstGood","secondGood","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","onClick","type","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA8CE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAiCH,oBAAS,GAA1C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EArCD,SACLC,EADK,GAGJ,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAGNE,EAAY,YAAOC,GA0BzB,OAtBIL,IAAaL,EAASI,MACxBK,EAAaE,MAAK,SAACC,EAAWC,GAC5B,OAAQR,GACN,KAAKL,EAASc,SACZ,OAAOF,EAAUG,cAAcF,GAGjC,KAAKb,EAASgB,OACZ,OAAOJ,EAAUK,OAASJ,EAAWI,OAGvC,QACE,OAAO,MAMXV,GACFE,EAAaS,UAGRT,EAMcU,CACnBlB,EACA,CAAEI,WAAUE,eAoBd,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,WAXff,EAAYN,EAASc,WAYfQ,KAAK,SACLF,UAAS,yBAAoBf,IAAaL,EAASc,SAAW,WAAa,IAH7E,iCAQA,wBACEO,QAAS,WAfff,EAAYN,EAASgB,SAgBfM,KAAK,SACLF,UAAS,4BAAuBf,IAAaL,EAASgB,OAAS,WAAa,IAH9E,4BAQA,wBACEK,QAAS,WA/Bfb,GAAYD,IAgCNe,KAAK,SACLF,UAAS,4BAAwBb,EAA0B,GAAb,YAHhD,sBAQEF,IAAaL,EAASI,MAAQG,IAC9B,wBACEc,QAAS,kBA7CjBf,EAAYN,EAASI,WACrBI,GAAW,IA6CHc,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,6BACGX,EAAac,KAAI,SAACC,GAAD,OAChB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YC7HnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.62e4d453.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  // eslint-disable-next-line no-console\n  if (sortType !== SortType.NONE) {\n    visibleGoods.sort((firstGood, secondGood) => {\n      switch (sortType) {\n        case SortType.ALPHABET: {\n          return firstGood.localeCompare(secondGood);\n        }\n\n        case SortType.LENGTH: {\n          return firstGood.length - secondGood.length;\n        }\n\n        default: {\n          return 0; // this is to make linter shut the hell up\n        }\n      }\n    });\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setReverse] = useState(false);\n  const visibleGoods = getReorderedGoods(\n    goodsFromServer,\n    { sortType, isReversed },\n  );\n\n  function reset() {\n    setSortType(SortType.NONE);\n    setReverse(false);\n  }\n\n  function reverseOrder() {\n    setReverse(!isReversed);\n  }\n\n  function sortAlphabetically() {\n    setSortType(SortType.ALPHABET);\n  }\n\n  function sortByLength() {\n    setSortType(SortType.LENGTH);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => (sortAlphabetically())}\n          type=\"button\"\n          className={`button is-info ${sortType !== SortType.ALPHABET ? 'is-light' : ''}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => (sortByLength())}\n          type=\"button\"\n          className={`button is-success ${sortType !== SortType.LENGTH ? 'is-light' : ''}`}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => (reverseOrder())}\n          type=\"button\"\n          className={`button is-warning ${!isReversed ? 'is-light' : ''}`}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed) && (\n          <button\n            onClick={() => (reset())}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}