{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setReverse","sortedGoods","goods","visibleGoods","sort","firstGood","secondGood","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","changeSortParameters","actionType","className","onClick","type","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA0CE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAiCH,oBAAS,GAA1C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAjCD,SACLC,EADK,GAGJ,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAGNI,EAAY,YAAOD,GAsBzB,OAlBIL,IAAaL,EAASI,MACxBO,EAAaC,MAAK,SAACC,EAAWC,GAC5B,OAAIT,IAAaL,EAASe,SACjBF,EAAUG,cAAcF,GAG7BT,IAAaL,EAASiB,OACjBJ,EAAUK,OAASJ,EAAWI,OAGhC,KAIPX,GACFI,EAAaQ,UAGRR,EAMaS,CAClBnB,EACA,CAAEI,WAAUE,eAGd,SAASc,EAAqBC,GACT,YAAfA,GACFd,GAAYD,GAGK,UAAfe,IACFhB,EAAYN,EAASI,MACrBI,GAAW,IAGM,iBAAfc,GACFhB,EAAYN,EAASe,UAGJ,eAAfO,GACFhB,EAAYN,EAASiB,QAIzB,OACE,sBAAKM,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAOH,EAAqB,iBACrCI,KAAK,SACLF,UAAS,yBAAoBlB,IAAaL,EAASe,SAAW,WAAa,IAH7E,iCAQA,wBACES,QAAS,kBAAOH,EAAqB,eACrCI,KAAK,SACLF,UAAS,4BAAuBlB,IAAaL,EAASiB,OAAS,WAAa,IAH9E,4BAQA,wBACEO,QAAS,kBAAOH,EAAqB,YACrCI,KAAK,SACLF,UAAS,4BAAwBhB,EAA0B,GAAb,YAHhD,sBAQEF,IAAaL,EAASI,MAAQG,IAC9B,wBACEiB,QAAS,kBAAOH,EAAqB,UACrCI,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,6BACGd,EAAYiB,KAAI,SAACC,GAAD,OACf,oBAAI,UAAQ,OAAZ,SAAoBA,aC3H9BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.03d10c26.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  // eslint-disable-next-line no-console\n  if (sortType !== SortType.NONE) {\n    visibleGoods.sort((firstGood, secondGood) => {\n      if (sortType === SortType.ALPHABET) {\n        return firstGood.localeCompare(secondGood);\n      }\n\n      if (sortType === SortType.LENGTH) {\n        return firstGood.length - secondGood.length;\n      }\n\n      return 0; // this is to make linter shut the hell up\n    });\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setReverse] = useState(false);\n  const sortedGoods = getReorderedGoods(\n    goodsFromServer,\n    { sortType, isReversed },\n  );\n\n  function changeSortParameters(actionType: string) {\n    if (actionType === 'reverse') {\n      setReverse(!isReversed);\n    }\n\n    if (actionType === 'reset') {\n      setSortType(SortType.NONE);\n      setReverse(false);\n    }\n\n    if (actionType === 'sortAlphabet') {\n      setSortType(SortType.ALPHABET);\n    }\n\n    if (actionType === 'sortLength') {\n      setSortType(SortType.LENGTH);\n    }\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => (changeSortParameters('sortAlphabet'))}\n          type=\"button\"\n          className={`button is-info ${sortType !== SortType.ALPHABET ? 'is-light' : ''}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => (changeSortParameters('sortLength'))}\n          type=\"button\"\n          className={`button is-success ${sortType !== SortType.LENGTH ? 'is-light' : ''}`}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => (changeSortParameters('reverse'))}\n          type=\"button\"\n          className={`button is-warning ${!isReversed ? 'is-light' : ''}`}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed) && (\n          <button\n            onClick={() => (changeSortParameters('reset'))}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map((good) => (\n          <li data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}